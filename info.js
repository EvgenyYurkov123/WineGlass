// ! Уже есть eslint
// * Уже есть .gitignore, package.json с зависимостями

// ? WebPack - собирает все компоненты, css и делает из него html
// ? jsx - позволяет вставлять js в html разметку
// ! Если export - то можно в 1 файле несколько делать, в файле, где import - достаю через деструктуризацию
// ! Если export default - то только 1 ф-я в файле!
// ! Если куча ф-ий то - export. Если export default - то без деструктуризации import Compo3, { Compom Compo2 } from './..'

// ? Виртуальный DOM: когда в коде реакта меняется часть - компоненты прогружаются сверху вниз и он сравнивает каждый компонент
// ? и каждый элемент и меняет точечно. Ему не нужно перерисовывать всё DOM дерево, меньше затрат на производительность
// ? Не всё заново, запуск всех скриптов и новый html, а аккуратное изменение конкретного элемента
// ! Чтобы что-то поменялось визульно, это должно поменяться в стейте (состоянии)

// ? Хуки - ф-ии, который написаны за нас и выполняют действия, наша задача понять их и начать применять
// * useState - хук (функция), которых хранит в себе состояния (данные) компонента, некая память компонента

// ! Правила хуков:
// todo 1 Любой хук должен начинаться use...
// todo 2 Вызывать хуки только из React-функций (компоненты) 
// todo 3 Любой хук должен вызываться на верхнем уровне (не в циклах, не в условиях)

// todo TypeScript
// * TypeScript — это язык программирования, в котором
// * исправлены многие недостатки JavaScript.
// * TS компилируется в JS и подходит для разработки любых
// * проектов под любые браузеры — тем более что можно
// * выбрать версию JS, в которую будет компилироваться код.

// todo JS - динамически типизированный язык, слабая неявная типизация
// todo TS - ПЫТАЕТСЯ сделать его статически типизированным
// todo у TS - самая мощная система типов из всех языков

// ! Писать на реакте с TS
// todo создать папку client с dev окружением
// * npm create vite@latest client -- --template react-ts
// ? тут уже tsx 
// todo В src не надо удалять:
// * vite-env.d.ts

// * https://jsonplaceholder.typicode.com/

// ! Рендер происходит когда:
// * 1 Отрендерился родительский компонент (если этот случай - используй memo)
// * 2 Изменился стейт в компоненте
// * 3 Изменились пропсы в компоненты
